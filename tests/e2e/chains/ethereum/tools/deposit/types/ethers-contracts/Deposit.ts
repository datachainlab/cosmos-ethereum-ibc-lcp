/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface DepositInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "deposit"
      | "get_deposit_count"
      | "get_deposit_root"
      | "supportsInterface"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "DepositEvent"): EventFragment;

  encodeFunctionData(
    functionFragment: "deposit",
    values: [BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "get_deposit_count",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "get_deposit_root",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "get_deposit_count",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_deposit_root",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
}

export namespace DepositEventEvent {
  export type InputTuple = [
    pubkey: BytesLike,
    withdrawal_credentials: BytesLike,
    amount: BytesLike,
    signature: BytesLike,
    index: BytesLike
  ];
  export type OutputTuple = [
    pubkey: string,
    withdrawal_credentials: string,
    amount: string,
    signature: string,
    index: string
  ];
  export interface OutputObject {
    pubkey: string;
    withdrawal_credentials: string;
    amount: string;
    signature: string;
    index: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Deposit extends BaseContract {
  connect(runner?: ContractRunner | null): Deposit;
  waitForDeployment(): Promise<this>;

  interface: DepositInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  deposit: TypedContractMethod<
    [
      pubkey: BytesLike,
      withdrawal_credentials: BytesLike,
      signature: BytesLike,
      deposit_data_root: BytesLike
    ],
    [void],
    "payable"
  >;

  get_deposit_count: TypedContractMethod<[], [string], "view">;

  get_deposit_root: TypedContractMethod<[], [string], "view">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [
      pubkey: BytesLike,
      withdrawal_credentials: BytesLike,
      signature: BytesLike,
      deposit_data_root: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "get_deposit_count"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "get_deposit_root"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;

  getEvent(
    key: "DepositEvent"
  ): TypedContractEvent<
    DepositEventEvent.InputTuple,
    DepositEventEvent.OutputTuple,
    DepositEventEvent.OutputObject
  >;

  filters: {
    "DepositEvent(bytes,bytes,bytes,bytes,bytes)": TypedContractEvent<
      DepositEventEvent.InputTuple,
      DepositEventEvent.OutputTuple,
      DepositEventEvent.OutputObject
    >;
    DepositEvent: TypedContractEvent<
      DepositEventEvent.InputTuple,
      DepositEventEvent.OutputTuple,
      DepositEventEvent.OutputObject
    >;
  };
}
